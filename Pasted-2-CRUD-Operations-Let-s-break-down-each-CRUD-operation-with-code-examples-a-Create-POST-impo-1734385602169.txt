2. CRUD Operations

Let's break down each CRUD operation with code examples:

a. Create (POST)

import React, { useState } from 'react';
import { db } from './firebaseConfig'; // Import your Firestore instance

function CreateItem() {
  const [newItem, setNewItem] = useState({
    name: '',
    description: '',
  });

  const handleSubmit = async (event) => {
    event.preventDefault();

    try {
      await db.collection('items').add(newItem);
      console.log('Item created successfully!');
      setNewItem({ name: '', description: '' }); // Clear the form
    } catch (error) {
      console.error('Error creating item:', error);
    }
  };

  return (
    <form onSubmit={handleSubmit}>
      <div>
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          value={newItem.name}
          onChange={(e) => setNewItem({ ...newItem, name: e.target.value })}
        />
      </div>
      <div>
        <label htmlFor="description">Description:</label>
        <textarea
          id="description"
          value={newItem.description}
          onChange={(e) => setNewItem({ ...newItem, description: e.target.value })}
        />
      </div>
      <button type="submit">Create Item</button>
    </form>
  );
}

export default CreateItem;
 Expand 
b. Read (GET)

import React, { useState, useEffect } from 'react';
import { db } from './firebaseConfig';

function ReadItems() {
  const [items, setItems] = useState([]);

  useEffect(() => {
    const unsubscribe = db.collection('items').onSnapshot((snapshot) => {
      const itemsData = snapshot.docs.map((doc) => ({
        id: doc.id,
        ...doc.data(),
      }));
      setItems(itemsData);
    });

    return () => unsubscribe(); // Cleanup on component unmount
  }, []);

  return (
    <ul>
      {items.map((item) => (
        <li key={item.id}>
          <h3>{item.name}</h3>
          <p>{item.description}</p>
        </li>
      ))}
    </ul>
  );
}

export default ReadItems;
 Expand 
c. Update (PUT/PATCH)

import React, { useState, useEffect } from 'react';
import { db } from './firebaseConfig';

function UpdateItem({ itemId }) {
  const [item, setItem] = useState(null);

  useEffect(() => {
    const unsubscribe = db.collection('items').doc(itemId).onSnapshot((doc) => {
      setItem({ id: doc.id, ...doc.data() });
    });

    return () => unsubscribe();
  }, [itemId]);

  const handleUpdate = async (event) => {
    event.preventDefault();

    try {
      await db.collection('items').doc(itemId).update(item);
      console.log('Item updated successfully!');
    } catch (error) {
      console.error('Error updating item:', error);
    }
  };

  if (!item) {
    return <div>Loading...</div>;
  }

  return (
    <form onSubmit={handleUpdate}>
      <div>
        <label htmlFor="name">Name:</label>
        <input
          type="text"
          id="name"
          value={item.name}
          onChange={(e) => setItem({ ...item, name: e.target.value })}
        />
      </div>
      <div>
        <label htmlFor="description">Description:</label>
        <textarea
          id="description"
          value={item.description}
          onChange={(e) => setItem({ ...item, description: e.target.value })}
        />
      </div>
      <button type="submit">Update Item</button>
    </form>
  );
}

export default UpdateItem;
 Expand 
d. Delete (DELETE)

import React from 'react';
import { db } from './firebaseConfig';

function DeleteItem({ itemId }) {
  const handleDelete = async () => {
    try {
      await db.collection('items').doc(itemId).delete();
      console.log('Item deleted successfully!');
    } catch (error) {
      console.error('Error deleting item:', error);
    }
  };

  return (
    <button onClick={handleDelete}>Delete Item</button>
  );
}

export default DeleteItem;
 Expand 